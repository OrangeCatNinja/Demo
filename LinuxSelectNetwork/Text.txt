#include <cstdio>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <iostream>
#include <string.h>
#include <sys/time.h>
#include <vector>
#include <errno.h>

#define INVALID_FD -1

int main()
{
	//监听一个socket
	int listenFd = socket(AF_INET, SOCK_STREAM, 0);
	if (listenFd == INVALID_FD)
	{
		std::cout << "create listen socket error" << std::endl;
		return -1;
	}

	//初始化服务地址
	sockaddr_in bindaddr;
	bindaddr.sin_family = AF_INET;
	bindaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	bindaddr.sin_port = htons(3000);
	if (bind(listenFd, (sockaddr*)&bindaddr, sizeof(bindaddr)) == -1)
	{
		std::cout << "bind listen socket error" << std::endl;
		close(listenFd);
		return -1;
	}

	//启动监听
	if (listen(listenFd, SOMAXCONN) == -1)
	{
		std::cout << "listen error" << std::endl;
		close(listenFd);
		return -1;
	}

	std::vector<int> clientfds;
	int maxfd;
	while (true)
	{
		fd_set readset;
		FD_ZERO(&readset);

		//将监听socket加入待检测的可读事件中
		FD_SET(listenFd,&readset);
		std::cout << "listenFd set into readset" << std::endl;

		maxfd = listenFd;
		//将客户端fd加入待检测的可读事件中
		int clientfdslength = clientfds.size();
		for (int i = 0; i < clientfdslength; ++i)
		{
			if (clientfds[i] != INVALID_FD)
			{
				FD_SET(clientfds[i], &readset);
				if (maxfd < clientfds[i])
					maxfd = clientfds[i];
			}
		}
		std::cout << "client size is:" << clientfds.size() << ",maxFd is:" << maxfd << std::endl;

		timeval tm;
		tm.tv_sec = 1;
		tm.tv_usec = 0;
		//暂时只监测可读事件，不检测可写事件和异常事件
		int ret = select(maxfd + 1, &readset, NULL, NULL, &tm);
		if (ret == -1)
		{
			//出错，退出程序
			if (errno != EINTR)
				break;
		}
		else if (ret == 0)
		{
			//select函数超时，下次继续
			continue;
		}
		else
		{
			//检测到有某个socket事件
			if (FD_ISSET(listenFd, &readset))
			{
				//监听socket可读事件，表明有新的连接到来
				struct sockaddr_in clientaddr;
				socklen_t clientaddrlen = sizeof(clientaddr);
				//4.接受客户端连接
				int clientfd = accept(listenFd, (sockaddr*)&clientaddr, &clientaddrlen);
				if (clientfd == INVALID_FD)
				{
					//接受连接出错，退出程序
					break;
				}

				//只接受连接，不调用recv
				std::cout << "accept a client connection, fd:" << clientfd << std::endl;
				clientfds.push_back(clientfd);
			}
			else
			{
				//假设对端发俩的数据长度不超过63字符
				char recvbuf[64];
				int clientfdslength = clientfds.size();
				for (int i = 0; i < clientfdslength; i++)
				{
					if (clientfds[i] != INVALID_FD && FD_ISSET(clientfds[i], &readset))
					{
						memset(recvbuf, 0, sizeof(recvbuf));
						//非监听socket,接受数据
						int length = recv(clientfds[i], recvbuf, 64, 0);
						if (length <= 0)
						{
							//接收数据出错
							std::cout << "recv data error,clientfd: " << clientfds[i] << std::endl;
							close(clientfds[i]);
							//不直接删除该元素，将该位置的元素标记为INVALID_FD
							clientfds[i] = INVALID_FD;
							continue;
						}

						std::cout << "clientfd: " << clientfds[i] << ", recv data:" << recvbuf << std::endl;
					}
				}
			}
		}
	}

	//关闭所有客户端socket
	int clientfdslength = clientfds.size();
	for (int i = 0; i < clientfdslength; i++)
	{
		if (clientfds[i] != INVALID_FD)
		{
			close(clientfds[i]);
		}
	}

	//关闭监听socket
	close(listenFd);
	                                                
    return 0;

	/*
		1、创建socket，初始化，设置地址信息
		2、监听服务器地址
		3、while true中，初始化fd_set，将所有监听的客户端socket放进fd_set
		4、select
		5、分析select结果
	*/

	//int servSocket = socket(AF_INET, SOCK_STREAM, 0);
	//if (servSocket == INVALID_FD)
	//{
	//	std::cout << "invalid socket, return -1" << std::endl;
	//	return -1;
	//}

	//struct sockaddr_in bindAddr;
	//bindAddr.sin_family = AF_INET;
	//bindAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	//bindAddr.sin_port = htonl(3000);

	//if (bind(servSocket, (struct sockaddr*)&bindAddr, sizeof(bindAddr)) < 0)
	//{
	//	std::cout << "bind addr failed, reutnr -1" << std::endl;
	//	close(servSocket);
	//	return -1;
	//}

	//if (listen(servSocket, SOMAXCONN) == -1)
	//{
	//	std::cout << "listen failed, reutrn -1" << std::endl;
	//	close(servSocket);
	//	return -1;
	//}

	//std::vector<int> clientVec;
	//int maxFd = 0;

	//while (true)
	//{
	//	fd_set fdSet;
	//	FD_ZERO(&fdSet);

	//	FD_SET(servSocket, &fdSet);
	//	maxFd = servSocket;
	//	
	//	for (int i = 0; i < clientVec.size(); i++)
	//	{
	//		if (clientVec[i] == INVALID_FD)
	//			continue;

	//		FD_SET(clientVec[i], &fdSet);
	//		if (maxFd < clientVec[i])
	//			maxFd = clientVec[i];
	//	}
	//	std::cout << "client size is:" << clientVec.size() << ",maxFd is:" << maxFd << std::endl;

	//	timeval tm;
	//	tm.tv_sec = 1;
	//	tm.tv_usec = 0;

	//	int ret = select(maxFd + 1, &fdSet, NULL, NULL, &tm);
	//	std::cout << "ret is:" << ret << std::endl;
	//	if (ret == -1)
	//	{
	//		if (errno != EINTR)
	//			break;
	//	}
	//	else if (ret == 0)
	//	{
	//		continue;
	//	}
	//	else
	//	{
	//		std::cout << "select respone" << std::endl;
	//		if (FD_ISSET(servSocket, &fdSet))
	//		{
	//			sockaddr_in clientAddr;
	//			socklen_t clientaddrlen = sizeof(clientAddr);

	//			int clientFd = accept(servSocket, (struct sockaddr*)&clientAddr, &clientaddrlen);
	//			if (clientFd == INVALID_FD)
	//				break;

	//			std::cout << "accept a client connection, fd: " << clientFd << std::endl;
	//			clientVec.push_back(clientFd);
	//		}
	//		else
	//		{
	//			char recvBuf[64];
	//			for (int i = 0; i < clientVec.size(); i++)
	//			{
	//				if (clientVec[i] != INVALID_FD && FD_ISSET(clientVec[i], &fdSet))
	//				{
	//					memset(recvBuf, 0, sizeof(recvBuf));
	//					int length = recv(clientVec[i], recvBuf, 64, 0);
	//					if (length <= 0)
	//					{
	//						std::cout << "recv data error,clientFd is: " << clientVec[i] << std::endl;
	//						close(clientVec[i]);
	//						clientVec[i] = INVALID_FD;
	//						continue;
	//					}
	//					std::cout << "clientfd: " << clientVec[i] << ", recv data is: " << recvBuf << std::endl;
	//				}
	//			}
	//		}
	//	}
	//}

	//for (int i = 0; i < clientVec.size(); i++)
	//{
	//	if (clientVec[i] != INVALID_FD)
	//	{
	//		close(clientVec[i]);
	//	}
	//}

	//close(servSocket);

	//return 0;
}